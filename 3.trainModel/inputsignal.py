# -*- coding: utf-8 -*-
"""inputSignal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZRQPFEy-cZsqRG9fzcAGvPie45-mhpru
"""

import torch
class InputSignal(torch.nn.Module):
  """ Return the input signal vector(tensor,N*6) in the finest level of a octree.
    N*M:N is the number of octants in the finest level
      M represents 6 features
  Args:
    only_occupied (bool): If false, gets the input signal of all octants in the finest level.
              including the non-occupied octants, whose input signal vector will set to [0.0,0.0,0.0,0.0,0.0,0.0] 
              default to False
  """
  def __init__(self, only_occupied = False):
    super().__init__()
    self.only_occupied = only_occupied

  def forward(self, octree):
    input_signal = octree.get_input_signal()
    if not self.only_occupied:
      input_signal=self.padding(input_signal, octree, octree.depth)
    return input_signal
  
  def padding(self,input_signal, octree, depth, pading_val=0.0):
    """ Pads pading_val to assign non-occupied octant a vector.
    Args:
      input_signal (torch.Tensor): The input tensor (num_occupied,6)
      octree (Octree): The corresponding octree.
      depth (int): The depth of current octree,default to the finest level.
      pading_val (float): The padding value. default to 0.0
    """
    mask = octree.label[depth]>= 0
    size = (octree.num[depth], input_signal.shape[1])  
    fill_value=pading_val
    out = torch.full(size, fill_value, dtype=input_signal.dtype, device=input_signal.device)
    out[mask] = input_signal
    return out